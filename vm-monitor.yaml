- name: Deploy VM Usage Monitor
  hosts: all
  become: true
  vars:
    service_dir: /etc/systemd/system
    bin_dir: /usr/local/lib/vm_monitor
    config_dir: /etc/vm_monitor
    data_dir: /var/lib/vm_monitor
    log_dir: /var/log/vm_monitor
    base_dir: /home/ubuntu/ansible-test/files/vm_monitor

    api_service: vm-monitor-api.service
    client_service: vm-monitor-client.service
    config_file: "config.yaml"
    scripts:
      - "{{ base_dir }}/vm_monitor_api.py"
      - "{{ base_dir }}/vm_monitor_client.py"
      - "{{ base_dir }}/vm_monitor_db.py"
    requirements_file: "{{ base_dir }}/requirements.txt"
    venv_dir: "{{ bin_dir }}/venv"
    vm_user: vmmonitor

  tasks:

    - name: Ensure vmmonitor user exists
      ansible.builtin.user:
        name: "{{ vm_user }}"
        system: yes
        shell: /usr/sbin/nologin
        state: present

    - name: Create required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ vm_user }}"
        group: "{{ vm_user }}"
        mode: "0755"
      loop:
        - "{{ bin_dir }}"
        - "{{ config_dir }}"
        - "{{ data_dir }}"
        - "{{ log_dir }}"

    - name: Copy Python scripts
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ bin_dir }}/"
        owner: "{{ vm_user }}"
        group: "{{ vm_user }}"
        mode: '0755'
      loop: "{{ scripts }}"
      ignore_errors: yes

    - name: Copy requirements.txt
      ansible.builtin.copy:
        src: "{{ requirements_file }}"
        dest: "{{ bin_dir }}/requirements.txt"
        owner: "{{ vm_user }}"
        group: "{{ vm_user }}"
        mode: '0644'
      ignore_errors: yes

    - name: Ensure system packages required for Python virtualenv exist
      ansible.builtin.apt:
        name:
          - python3-venv   # for python3 -m venv
          - python3-pip    # pip3 executable
          - virtualenv
        state: present
        update_cache: yes

    - name: Ensure Python virtual environment exists
      ansible.builtin.pip:
        virtualenv: "{{ venv_dir }}"
        virtualenv_python: python3
        requirements: "{{ bin_dir }}/requirements.txt"
        state: present

    - name: Ensure venv ownership
      file:
        path: "{{ venv_dir }}"
        owner: "{{ vm_user }}"
        group: "{{ vm_user }}"
        recurse: yes

    - name: Copy configuration file
      ansible.builtin.copy:
        src: "{{ base_dir }}/{{ config_file }}"
        dest: "{{ config_dir }}/{{ config_file }}"
        owner: "{{ vm_user }}"
        group: "{{ vm_user }}"
        mode: '0644'
      ignore_errors: yes

    - name: Copy systemd service files
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ service_dir }}/"
        owner: root
        group: root
        mode: '0644'
      loop:
        - "{{ base_dir }}/{{ api_service }}"
        - "{{ base_dir }}/{{ client_service }}"
      ignore_errors: yes

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable and start services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - "{{ api_service }}"
        - "{{ client_service }}"